package jni;

import java.util.ArrayList;

import android.os.Handler;
import android.os.Message;
import android.util.Log;

import jni.LooperTest.MyThread;
import jni.LooperTest.OnClickListener;

/**
 * Singleton class Use method Gpio.getInstance() to get instance
 * 
 * @author Jun
 * 
 */
public class Gpio {
	// Load library when class loaded
	static {
		System.loadLibrary("gpio");
	}

	private ArrayList<OnClickListener> listeners;
	private  gpioListenerThread;

	private static Gpio instance;
	private static final String tag = "Gpio";
	private static final int GPIO_CLICK = 1;
	
	public static final int KEYCODE_GPIO = 100;

	private Gpio() {
		listeners = new ArrayList<Gpio.OnClickListener>();

		// Startup thread
		MyThread th = new MyThread(new Handler() {

			@Override
			public void handleMessage(Message msg) {
				if (msg.what == 1) {
					for (int i = 0; i < listeners.size(); i++) {
						listeners.get(i).onClick(3);
					}
				}
			}

		});
		th.setName("GpioButtonListenerThread");
		th.start();

		Log.d(tag, "Looper Test instance created");
	}

	public void addOnClickListener(OnClickListener listener) {
		this.listener = listener;
	}

	/**
	 * Return -1 = ERROR Return 0 = Good
	 * 
	 * @return
	 */
	private native int waitClick();

	private void setGpioAsyncTask() {
		GpioAsync async = new GpioAsync();
		async.execute();
	}

	public static synchronized Gpio getInstance() {
		if (ins == null) {
			ins = new Gpio();
		}
		return ins;
	}

	private class GpioAsync extends AsyncTask<Void, Void, Integer> {

		@Override
		protected void onPreExecute() {
			super.onPreExecute();
			// Before background task
		}

		@Override
		protected Integer doInBackground(Void... params) {
			// Wait until GPIO button pressed
			return waitClick();
		}

		@Override
		protected void onPostExecute(Integer result) {
			super.onPostExecute(result);
			// After background task
			if (listener != null)
				listener.onClick(result);

			setGpioAsyncTask();
		}
	}
	
	private class GpioThread extends Thread {
		private Handler handler;

		public GpioThread(Handler handler) {
			this.handler = handler;
		}

		@Override
		public void run() {
			while (true) {
				handler.sendEmptyMessage(1);
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		}
	}

	public interface OnClickListener {
		/**
		 * 0 = success, -1 = error
		 * 
		 * @param result
		 */
		void onClick(Integer result);
	}
}